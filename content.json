[{"title":"seafile搭建","slug":"seafile搭建","date":"2017-10-04T04:13:27.091Z","updated":"2017-10-04T06:00:33.591Z","comments":true,"path":"2017/10/04/seafile搭建/","link":"","permalink":"http://yoursite.com/2017/10/04/seafile搭建/","excerpt":"","text":"#部署seafile服务器 ###来源：seafile服务器中文操作手册 #一、下载seafile的服务器端文件并安装 ####1.1 在命令行下输入 wget http://seafile-downloads.oss-cn-shanghai.aliyuncs.com/seafile-server_6.2.2_x86-64.tar.gz &lt;目录&gt; ####1.2 部署和目录设计 mkdir haiwen mv seafile-server_* haiwen cd haiwen #将 seafile-server_* 移动到 haiwen 目录下后 tar -xzf seafile-server_* mkdir installed mv seafile-server_* installed 现在，你的目录看起来应该像这样： #tree haiwen -L 2 haiwen ├── installed │ └── seafile-server_1.8.2_x86-64.tar.gz └── seafile-server-1.8.2 ├── reset-admin.sh ├── runtime ├── seafile ├── seafile.sh ├── seahub ├── seahub.sh ├── setup-seafile.sh └── upgrade 这样设计目录的好处在于 和 seafile 相关的配置文件都可以放在 haiwen 目录下，便于集中管理. -后续升级时,你只需要解压最新的安装包到 haiwen 目录下. ####1.3 安装前的准备工作安装 Seafile 服务器之前，请确认已安装以下软件 MariaDB 或者 MySQL 服务器 (MariaDB 是 MySQL 的分支) python 2.7 (从 Seafile 5.1 开始，python 版本最低要求为2.7） python-setuptools python-imaging python-mysqldb python-ldap python-urllib3 python-memcache (或者 python-memcached) ####1.4 在centos7下安装 # on CentOS 7 yum -y install epel-release rpm --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro yum -y install python-imaging MySQL-python python-memcached python-ldap python-urllib3 ffmpeg ffmpeg-devel pip install pillow moviepy ####1.5 在安装seafile前先安装Mariadb-server 安装命令 yum -y install mariadb mariadb-server 注意：这需要一些时间下载文件安装完成Mariadb，启动Mariadb systemctl start mariadb 设置开机启动 systemctl enable mariadb 接下来进行Maeiadb的相关配置 mysql_secure_installation 首先是设置密码，会提示先输入密码 Enter current password for root (enter for none):&lt;–初次运行直接回车 设置密码 Set root password? [Y/n] &lt;– 是否设置root用户密码，输入y并回车或直接回车 New password: &lt;– 设置root用户的密码 Re-enter new password: &lt;– 再输入一次你设置的密码 其他配置 Remove anonymous users? [Y/n] &lt;– 是否删除匿名用户，回车 Disallow root login remotely? [Y/n] &lt;–是否禁止root远程登录,回车, Remove test database and access to it? [Y/n] &lt;– 是否删除test数据库，回车 Reload privilege tables now? [Y/n] &lt;– 是否重新加载权限表，回车 初始化MariaDB完成，接下来测试登录 mysql -uroot -ppassword 完成。 ###配置MariaDB的字符集 文件/etc/my.cnf vi /etc/my.cnf 在[mysqld]标签下添加 init_connect=&apos;SET collation_connection = utf8_unicode_ci&apos; init_connect=&apos;SET NAMES utf8&apos; character-set-server=utf8 collation-server=utf8_unicode_ci skip-character-set-client-handshake 文件/etc/my.cnf.d/client.cnf vi /etc/my.cnf.d/client.cnf 在[client]中添加 default-character-set=utf8 文件/etc/my.cnf.d/mysql-clients.cnf vi /etc/my.cnf.d/mysql-clients.cnf 在[mysql]中添加 default-character-set=utf8 全部配置完成，重启mariadb systemctl restart mariadb 之后进入MariaDB查看字符集 mysql&gt; show variables like &quot;%character%&quot;;show variables like &quot;%collation%&quot;; 显示为 +--------------------------+----------------------------+ | Variable_name | Value | +--------------------------+----------------------------+ | character_set_client | utf8 | | character_set_connection | utf8 | | character_set_database | utf8 | | character_set_filesystem | binary | | character_set_results | utf8 | | character_set_server | utf8 | | character_set_system | utf8 | | character_sets_dir | /usr/share/mysql/charsets/ | +--------------------------+----------------------------+ 8 rows in set (0.00 sec) +----------------------+-----------------+ | Variable_name | Value | +----------------------+-----------------+ | collation_connection | utf8_unicode_ci | | collation_database | utf8_unicode_ci | | collation_server | utf8_unicode_ci | +----------------------+-----------------+ 3 rows in set (0.00 sec) 字符集配置完成。 ###添加用户，设置权限 创建用户命令 mysql&gt;create user username@localhost identified by &apos;password&apos;; 直接创建用户并授权的命令 mysql&gt;grant all on *.* to username@localhost indentified by &apos;password&apos;; 授予外网登陆权限 mysql&gt;grant all privileges on *.* to username@&apos;%&apos; identified by &apos;password&apos;; 授予权限并且可以授权 mysql&gt;grant all privileges on *.* to username@&apos;hostname&apos; identified by &apos;password&apos; with grant option; 简单的用户和权限配置基本就这样了。 其中只授予部分权限把 其中 all privileges或者all改为select,insert,update,delete,create,drop,index,alter,grant,references,reload,shutdown,process,file其中一部分。 ##安装 cd seafile-server-* ./setup-seafile-mysql.sh #运行安装脚本并回答预设问题 如果你的系统中没有安装上面的某个软件，那么 Seafile初始化脚本会提醒你安装相应的软件包. 该脚本会依次询问你一些问题，从而一步步引导你配置 Seafile 的各项参数:参数 作用 说明 seafile server name #seafile 服务器的名字，目前该配置已经不再使用 3 ~ 15 个字符，可以用英文字母，数字，下划线 seafile server ip or domain #seafile 服务器的 IP 地址或者域名 客户端将通过这个 IP 或者地址来访问你的 Seafile 服务 seafile data dir #seafile 数据存放的目录，用上面的例子，默认将是 /data/haiwen/seafile-data seafile 数据将随着使用而逐渐增加，请把它放在一个有足够大空闲空间的分区上 seafile fileserver port #seafile fileserver 使用的 TCP 端口 该端口用于文件同步，请使用默认的 8082，不能更改。在这里, 你会被要求选择一种创建 Seafile 数据库的方式: Please choose a way to initialize seafile databases: [1] Create new ccnet/seafile/seahub databases [2] Use existing ccnet/seafile/seahub databases 如果选择1, 你需要提供根密码. 脚本程序会创建数据库和用户。 如果选择2, ccnet/seafile/seahub 数据库应该已经被你（或者其他人）提前创建。 如果安装正确完成，你会看到下面这样的输出 (新版本可能会有所不同) server-setup-succesfully 现在你的目录结构看起来应该是这样: #tree haiwen -L 2 haiwen ├── conf # configuration files │ ├── ccnet.conf │ └── seafile.conf │ └── seahub_settings.py │ └── seafdav.conf ├── ccnet │ ├── mykey.peer │ ├── PeerMgr │ └── seafile.ini ├── installed │ └── seafile-server_1.8.2_x86-64.tar.gz ├── seafile-data ├── seafile-server-1.8.2 # active version │ ├── reset-admin.sh │ ├── runtime │ ├── seafile │ ├── seafile.sh │ ├── seahub │ ├── seahub.sh │ ├── setup-seafile.sh │ └── upgrade ├── seafile-server-latest # symbolic link to seafile-server-1.8.2 ├── seahub-data │ └── avatars seafile-server-latest文件夹为指向当前 Seafile 服务器文件夹的符号链接. 将来你升级到新版本后, 升级脚本会自动更新使其始终指向最新的 Seafile 服务器文件夹.启动 Seafile 服务器 启动 Seafile 服务器和 Seahub 网站 在 seafile-server-1.8.2 目录下，运行如下命令 启动 Seafile: ./seafile.sh start # 启动 Seafile 服务 启动 Seahub ./seahub.sh start &lt;port&gt; # 启动 Seahub 网站 （默认运行在8000端口上） 小贴士: 你第一次启动 seahub 时，seahub.sh 脚本会提示你创建一个 seafile 管理员帐号。 服务启动后, 打开浏览器并输入以下地址 http://192.168.1.111:8000/ 你会被重定向到登陆页面. 输入管理员用户名和密码即可。恭喜! 现在你已经成功的安装了 Seafile 服务器.在另一端口上运行 Seahub 如果你不想在默认的 8000 端口上运行 Seahub, 而是想自定义端口（比如8001）中运行，请按以下步骤操作: 关闭 Seafile 服务器 ./seahub.sh stop # 停止 Seafile 进程 ./seafile.sh stop # 停止 Seahub 更改haiwen/conf/ccnet.conf文件中SERVICE_URL 的值(假设你的 ip 或者域名时192.168.1.100), 如下 (从 5.0 版本开始，可以直接在管理员界面中设置。注意，如果同时在 Web 界面和配置文件中设置了这个值，以 Web 界面的配置为准。): SERVICE_URL = http://192.168.1.100:8001 重启 Seafile 服务器 ./seafile.sh start # 启动 Seafile 服务 ./seahub.sh start 8001 # 启动 Seahub 网站 （运行在8001端口上） 关闭/重启 Seafile 和 Seahub 关闭 ./seahub.sh stop # 停止 Seahub ./seafile.sh stop # 停止 Seafile 进程 重启 ./seafile.sh restart # 停止当前的 Seafile 进程，然后重启 Seafile ./seahub.sh restart # 停止当前的 Seahub 进程，并在 8000 端口重新启动 Seahub 如果停止/重启的脚本运行失败 大多数情况下 seafile.sh seahub.sh 脚本可以正常工作。如果遇到问题： 使用pgrep命令检查 seafile/seahub 进程是否还在运行中 pgrep -f seafile-controller # 查看 Seafile 进程 pgrep -f &quot;seahub&quot; # 查看 Seahub 进程 使用pkill命令杀掉相关进程 pkill -f seafile-controller # 结束 Seafile 进程 pkill -f &quot;seahub&quot; # 结束 Seafile 进程 #OK! 文章有引用：Linux社区","categories":[],"tags":[]},{"title":"Netflow下载与使用","slug":"netflow","date":"2017-09-24T10:16:12.965Z","updated":"2017-10-03T07:48:24.288Z","comments":true,"path":"2017/09/24/netflow/","link":"","permalink":"http://yoursite.com/2017/09/24/netflow/","excerpt":"","text":"1.Netflow介绍 &emsp;&emsp;NetFlow是一种数据交换方式，其工作原理是：NetFlow利用标准的交换模式处理数据流的第一个IP包数据，生成NetFlow 缓存，随后同样的数据基于缓存信息在同一个数据流中进行传输，不再匹配相关的访问控制等策略，NetFlow缓存同时包含了随后数据流的统计信息。 &emsp;&emsp;其次我们要关注的事netflow的产生：1996年，Cisco系统公司的Darren Kerr和Barry Bruins开发了一种流量轮廓监控技术，即NetFlow。作为业界事实标准，NetFlow描述了路由器输出关于被路由套接字对（the routed socket pairs）统计信息的方法。目前Cisco的绝大多数路由器集成了该特性，Juniper、Extreme以及其他厂商也有集成该特性的路由器和交换机。NetFlow是Cisco发布的一款用于分析网络数据包信息的工具包。利用Netflow技术可以监测网络上的IP流（IP flow）信息。采集到的netflow流量信息可以帮助进行网络规划，网络管理，流量计费和病毒检测等等注意：netflow是cisco开发并一直升级的，所以现在的netflow在思科的路由、交换器上是应用最广又或者是只有思科的路由器有这样的功能，只有极少数的路由有并且只是sflow的功能，像juniper。但是并不是所有思科的路由、交换器都有netflow功能，版本越高的路由器功能越全面，像c7200。版本较低的可能就没有，像c3630这个版本就不能配置netflow 2.下载链接netflow下载地址http://www.manageengine.com/products/netflow/download.html#more_download3.安装Netflow的重点&emsp;&emsp;3.1 记好默认的端口号并选择语言，如下图所示&emsp;&emsp;&emsp;3.2 记住默认的snmp端口&emsp;&emsp;3.3 接着一路默认安装即可4.配置及检测数据CISC交换机c2801路由器配置netflow ###1.config全局模式下配置netflow版本号 (config)#ip flow-export version 5 ###2.config全局模式下配置netflow服务器地址和端口号 (config)#ip flow-export destination xxx.xxx.xxx.xxx 9996 注意：xxx.xxx.xxx.xxx为netflow服务器地址，即运行netflow版流量监控程序主机的IP地址，9996为服务器端口号，即安装netflow是的默认端口号 ###3.在Cisco系列路由器交换机每个接口上（例如interface fastethernet0/0；interface fastethernet0/1等）分别进行配置： (config-if)#ip route-cache flow ###4.接着退出接口模式，进入全局模式（config）设置时区 （config)#clock timezone Beijing 8 设置为北京时区 ###5.enable状态下设置日期时间，最好是当下的时间 #clock set hh:mm:ss day mon year 注意： **先设置时区在设置日期时间 这是设置的netflow功能的路由器的时间，我们还需要将运行netflow程序的计算机修改成同步的时间。 ###ps： show ip flow export 显示当前Netflow的配置。 show ip cache flow 该命令显示当前活动的流的概要，还显示设备输出了多少Netflow数据 5.完成一切正确的配置之后会检测到的数据 &emsp;&emsp;这款软件有一个特点，在你配置好路由上的所有命令之后，打开监控的界面，他会自动检测到配置过netflow的路由的列表，剩下的就是根据自己的需要进行一系列的筛选和分析。但是，我对与很多应用用到的协议等的了解的太少，所以收集到的信息以及统计道德流量信息都是粗略的消息，并没有通过详细的过滤来了解到某一应用的检测与分析。","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2017-09-13T07:19:43.852Z","updated":"2017-10-03T07:50:36.193Z","comments":true,"path":"2017/09/13/hello-world/","link":"","permalink":"http://yoursite.com/2017/09/13/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]